---
import { basics } from "@cv"

interface Props {
  title: string
}

const { title } = Astro.props

const { image, summary, url } = basics
---

<!doctype html>
<html lang="es">
  <head>
    <meta charset="UTF-8" />
    <title>{title}</title>
    <meta name="description" content={summary} />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="preload" as="image" href={image} />

    <meta property="og:url" content={url} />
    <meta property="og:type" content="website" />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={summary} />
    <meta property="og:image" content="" />

    <meta name="twitter:card" content="summary_large_image" />
    <meta property="twitter:domain" content={url.split("//")[1] ?? ''} />
    <meta property="twitter:url" content={url} />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={summary} />
    <meta name="twitter:image" content="" />
  </head>
  <body>
    <slot />
    <button id="theme-toggle" class="theme-toggle" aria-label="Cambiar tema">
      <svg class="sun-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <circle cx="12" cy="12" r="5"></circle>
        <line x1="12" y1="1" x2="12" y2="3"></line>
        <line x1="12" y1="21" x2="12" y2="23"></line>
        <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line>
        <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line>
        <line x1="1" y1="12" x2="3" y2="12"></line>
        <line x1="21" y1="12" x2="23" y2="12"></line>
        <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line>
        <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line>
      </svg>
      <svg class="moon-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path>
      </svg>
    </button>
  </body>
</html>

<style is:global>
  :root {
    --background: #fff;
    --text: #666;
    --heading: #000;
    --border: #eee;
    --card-bg: #fff;
    --card-border: #eee;
    --card-shadow: 0 1px 1px #f2f2f2;
    --scrollbar-thumb: #999;
    --scrollbar-thumb-hover: #666;
  }

  [data-theme="dark"] {
    --background: #1a1a1a;
    --text: #a0a0a0;
    --heading: #fff;
    --border: #333;
    --card-bg: #242424;
    --card-border: #333;
    --card-shadow: 0 1px 1px #000;
    --scrollbar-thumb: #444;
    --scrollbar-thumb-hover: #666;
  }

  html {
    font-family:
      Menlo,
      Monaco,
      Lucida Console,
      "Courier New",
      Courier,
      monospace;
    background: var(--background);
    color: var(--text);
    letter-spacing: -0.025rem;
    transition: background-color 0.3s ease, color 0.3s ease;
    scrollbar-width: thin;
    scrollbar-color: var(--border) transparent;
  }

  body,
  figure {
    margin: 0;
    padding: 0;
  }

  a {
    text-decoration: none;
    color: var(--text);
  }

  ul {
    list-style: none;
    margin: 0;
    padding: 0;
  }

  *,
  *::before,
  *::after {
    box-sizing: border-box;
  }

  h1,
  h2,
  h3,
  h4 {
    margin: 0;
    color: var(--heading);
    font-family:
      system-ui,
      -apple-system,
      BlinkMacSystemFont,
      "Segoe UI",
      Roboto,
      Oxygen,
      Ubuntu,
      Cantarell,
      "Open Sans",
      "Helvetica Neue",
      sans-serif;
  }

  p {
    color: var(--text);
    font-size: 0.9rem;
    line-height: 1.5;
    margin: 0;
    text-wrap: pretty;
  }

  .theme-toggle {
    position: fixed;
    top: 1rem;
    right: 1rem;
    background: var(--card-bg);
    border: 1px solid var(--border);
    border-radius: 50%;
    width: 40px;
    height: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    z-index: 1000;
    transition: background-color 0.3s ease;
  }

  .theme-toggle:hover {
    background: var(--border);
  }

  .sun-icon {
    display: none;
  }

  .moon-icon {
    display: block;
  }

  [data-theme="dark"] .sun-icon {
    display: block;
  }

  [data-theme="dark"] .moon-icon {
    display: none;
  }

  .print {
    display: none !important;
  }

  @media print {
    .no-print {
      display: none !important;
    }

    .print {
      display: block !important;
    }

    astro-dev-toolbar {
      display: none !important;
    }

    article {
      break-inside: avoid;
    }
  }

  /* Estilos para la barra de desplazamiento en Chrome/Safari */
  ::-webkit-scrollbar {
    width: 8px;
    height: 8px;
  }

  ::-webkit-scrollbar-track {
    background: transparent;
  }

  ::-webkit-scrollbar-thumb {
    background: var(--scrollbar-thumb);
    border-radius: 4px;
  }

  ::-webkit-scrollbar-thumb:hover {
    background: var(--scrollbar-thumb-hover);
  }

  /* Ocultar barra de desplazamiento cuando no se usa */
  * {
    scrollbar-width: thin;
    scrollbar-color: var(--scrollbar-thumb) transparent;
  }

  *::-webkit-scrollbar {
    width: 8px;
    height: 8px;
  }

  *::-webkit-scrollbar-track {
    background: transparent;
  }

  *::-webkit-scrollbar-thumb {
    background: var(--scrollbar-thumb);
    border-radius: 4px;
  }

  *::-webkit-scrollbar-thumb:hover {
    background: var(--scrollbar-thumb-hover);
  }

  /* Ocultar barra de desplazamiento cuando no se usa */
  * {
    -ms-overflow-style: none;
  }

  *::-webkit-scrollbar {
    display: none;
  }

  *:hover::-webkit-scrollbar {
    display: block;
  }
</style>

<script>
  const theme = (() => {
    if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
      return localStorage.getItem('theme');
    }
    if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
      return 'dark';
    }
    return 'light';
  })();

  if (theme === 'light') {
    document.documentElement.removeAttribute('data-theme');
  } else {
    document.documentElement.setAttribute('data-theme', 'dark');
  }

  window.localStorage.setItem('theme', theme);

  const handleToggleClick = () => {
    const element = document.documentElement;
    const isDark = element.getAttribute('data-theme') === 'dark';
    element.setAttribute('data-theme', isDark ? 'light' : 'dark');
    localStorage.setItem('theme', isDark ? 'light' : 'dark');
  }

  document.getElementById('theme-toggle').addEventListener('click', handleToggleClick);
</script>
